print(xtable(lm(x ~ y)))
xtable(lm(x ~ y))
xtable(summary(lm(x ~ y)))
test <- summary(lm(x ~ y))
x <- rnorm(10)+1:10
y <- rnorm(10)+1:10
test <- summary(lm(x ~ y))
plot(x~y)
xtable(test)
library(sweave)
??sweave
library(Sweave
)
library(kniter)
library(knitr)
library(dichromat)
install.packages('dichromat')
library(dichromat
)
data("dalton", package = "dichromat")
par(mfrow = c(4, 1))
image(matrix(1:256, 128), col = dalton.colors$normal)
image(matrix(1:256, 128), col = dalton.colors$deutan)
image(matrix(1:256, 128), col = dalton.colors$protan)
image(matrix(1:256, 128), col = dalton.colors$tritan)
data("dalton", package = "dichromat")
par(mfrow = c(4, 1))
image(matrix(1:256, 128), col = dalton.colors$normal)
image(matrix(1:256, 128), col = dalton.colors$deutan)
image(matrix(1:256, 128), col = dalton.colors$protan)
image(matrix(1:256, 128), col = dalton.colors$tritan)
plot(1,1)
par()
plot(1,1)
colorschemes
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("M","F"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residuals
chisq.test(table(map$gender, map$wash))
?knitr
??knitr
library(list=c('vegan', 'picante'))
?library
library(c('vegan', 'picante'))
library(vegan)
library(labdsv)
library(ape)
library(picante)
source('~/Dropbox/PickleBox2/Ill_Run/R/manuscript_code/pb_functions_for_manuscript.R')
pb <- read.delim('~/Dropbox/PickleBox2/Ill_Run/qiime/pb/raw/otus/uclust_picked_otus/otu_table_r.txt', head=TRUE, row.names=1)
pb <- t(pb) # transpose rows and cols
pb.map <- read.delim('~/Dropbox/PickleBox2/Ill_Run/R/pb_map.txt', head=TRUE, row.names=1)
part <- read.delim('~/Dropbox/PickleBox/particles.txt', head=TRUE)
pb.map <- pb.map[row.names(pb), ]
head(pb.map)
pb.tax <- pb[, ncol(pb)]
pb <- pb[, -ncol(pb)] # remove taxonomy from original dataset
plants <- grep('Streptophyt', pb.tax)
pb.np <- pb[, -plants]
tax.np <- pb.tax[-plants] # remove from taxonomy to line up
pb.3500 <- pb.np[which(rowSums(pb.np) > 3500), ]
pb.3500 <- rrarefy(pb.3500, 3500)
dim(pb.3500)
dim(pb.np)
plants
grep('Streptophyt', pb.tax)
pb.tax[1:10]
pb <- read.delim('~/Dropbox/PickleBox2/Ill_Run/qiime/pb/raw/otus/uclust_picked_otus/with_tax/otu_table_r.txt', head=TRUE, row.names=1)
pb <- t(pb) # transpose rows and cols
pb.map <- read.delim('~/Dropbox/PickleBox2/Ill_Run/R/pb_map.txt', head=TRUE, row.names=1)
part <- read.delim('~/Dropbox/PickleBox/particles.txt', head=TRUE)
pb.map <- pb.map[row.names(pb), ]
pb.tax <- pb[, ncol(pb)]
pb <- pb[, -ncol(pb)] # remove taxonomy from original dataset
plants <- grep('Streptophyt', pb.tax)
pb.np <- pb[, -plants]
tax.np <- pb.tax[-plants] # remove from taxonomy to line up
dim(pb.np)
plants
pb.tax
pb <- read.delim('~/Dropbox/PickleBox2/Ill_Run/qiime/pb/raw/otus/uclust_picked_otus/with_tax/otu_table_r.txt', head=TRUE, row.names=1)
row.names(pb)
pb <- t(pb) # transpose rows and cols
row.names(pb)
pb.map <- read.delim('~/Dropbox/PickleBox2/Ill_Run/R/pb_map.txt', head=TRUE, row.names=1)
part <- read.delim('~/Dropbox/PickleBox/particles.txt', head=TRUE)
pb.map <- pb.map[row.names(pb)[-nrow(pb)], ]
pb.map
pb.tax <- pb[nrow(pb), ]
pb.tax
pb <- pb[-nrow(pb), ] # remove taxonomy from original dataset
dim(pb)
plants <- grep('Streptophyt', pb.tax)
plants
pb.np <- pb[, -plants]
tax.np <- pb.tax[-plants] # remove from taxonomy to line up
dim(pb.np)
dim(pb); dim(pb.np)
pb.3500 <- pb.np[which(rowSums(pb.np) > 3500), ]
sum(pb.3500)
sum(pb.np)
pb.np <- numeric(pb.np)
pb.np <- as.numeric(pb.np)
sum(pb.np)
pb.3500 <- pb.np[which(rowSums(pb.np) > 3500), ]
pb.np <- pb[, -plants]
pb.np <- as.matrix(as.numeric(pb.np))
dim(pb.np)
pb.np <- pb[, -plants]
pb.np <- as.matrix(pb.np)
dim(pb.np)
tax.np <- pb.tax[-plants] # remove from taxonomy to line up
pb.3500 <- pb.np[which(rowSums(pb.np) > 3500), ]
pb <- read.delim('~/Dropbox/PickleBox2/Ill_Run/qiime/pb/raw/otus/uclust_picked_otus/with_tax/otu_table_r.txt', head=TRUE, row.names=1)
pb.tax <- pb[, ncol(pb)]
pb <- pb[, -ncol(pb)]
pb <- t(pb) # transpose rows and cols
sum(pb)
pb.map <- read.delim('~/Dropbox/PickleBox2/Ill_Run/R/pb_map.txt', head=TRUE, row.names=1)
part <- read.delim('~/Dropbox/PickleBox/particles.txt', head=TRUE)
pb.map <- pb.map[row.names(pb)[-nrow(pb)], ]
plants <- grep('Streptophyt', pb.tax)
plants
pb.np <- pb[, -plants]
dim(pb.np)
tax.np <- pb.tax[-plants] # remove from taxonomy to line up
pb.3500 <- pb.np[which(rowSums(pb.np) > 3500), ]
pb.3500 <- rrarefy(pb.3500, 3500)
dim(pb.3500)
pb.map.3500 <- pb.map[row.names(pb.3500), -c(1,2,11,12)]
head(pb.map.3500)
pb.map.3500 <- pb.map.3500[order(row.names(pb.map.3500)), ]
pb.3500 <- pb.3500[row.names(pb.map.3500), ]
head(pb.map.3500)
pb.map.3500$person[1:3] <- 'none'
pb.map.3500$person[which(is.na(pb.map.3500$person))] <- 'control'
pb.map.3500
pb.map.3500$person <- as.character(pb.map.3500)
pb.map.3500$person <- as.character(pb.map.3500$person)
pb.map.3500
pb.map.3500$person[which(is.na(pb.map.3500$person))] <- 'control'
pb.map.3500$person
table(pb.map.3500$person, pb.map.3500$sampleType)
table(pb.map.3500$location)
table(pb.map.3500$duration)
table(pb.map.3500$sampleType)
tax.np[1:10]
makeTaxo <- function(taxo.in=tax.np, otu.table=pb.3500) {
tax.tmp.ls <- strsplit(taxo.in, split='; ')
tax.lengths <- unlist(lapply(tax.tmp.ls, length))
max(tax.lengths)
tax.tmp.ls[[1]][1]
# test
# x <- c('a; b; c; d', 'e; f; g', 'i; j')
# x2 <- strsplit(x, '; ')
# x3 <- data.frame(one=sapply(x2, function(x){x[1]}),
# two=sapply(x2, function(x){x[2]}),
# three=sapply(x2, function(x){x[3]}),
# four=sapply(x2, function(x){x[4]}))
# x3
# x3$four <- as.character(x3$four)
# x3$four[which(is.na(x3$four))] <- 'h'
taxo <- data.frame(kingdom=sapply(tax.tmp.ls, function(x){x[1]}),
phylum=sapply(tax.tmp.ls, function(x){x[2]}),
class=sapply(tax.tmp.ls, function(x){x[3]}),
order=sapply(tax.tmp.ls, function(x){x[4]}),
family=sapply(tax.tmp.ls, function(x){x[5]}),
genus=sapply(tax.tmp.ls, function(x){x[6]}))
taxo$kingdom <- as.character(taxo$kingdom)
taxo$phylum <- as.character(taxo$phylum)
taxo$class <- as.character(taxo$class)
taxo$order <- as.character(taxo$order)
taxo$family <- as.character(taxo$family)
taxo$genus <- as.character(taxo$genus)
for (i in 1:ncol(taxo)){
taxo[which(is.na(taxo[, i])), i] <- ''
}
# taxo.all <- taxo # save big one
taxo$abundance <- colSums(otu.table)
row.names(taxo) <- colnames(otu.table)
}
makeTaxo <- function(taxo.in=tax.np, otu.table=pb.3500) {
tax.tmp.ls <- strsplit(taxo.in, split='; ')
tax.lengths <- unlist(lapply(tax.tmp.ls, length))
max(tax.lengths)
tax.tmp.ls[[1]][1]
# test
# x <- c('a; b; c; d', 'e; f; g', 'i; j')
# x2 <- strsplit(x, '; ')
# x3 <- data.frame(one=sapply(x2, function(x){x[1]}),
# two=sapply(x2, function(x){x[2]}),
# three=sapply(x2, function(x){x[3]}),
# four=sapply(x2, function(x){x[4]}))
# x3
# x3$four <- as.character(x3$four)
# x3$four[which(is.na(x3$four))] <- 'h'
taxo <- data.frame(kingdom=sapply(tax.tmp.ls, function(x){x[1]}),
phylum=sapply(tax.tmp.ls, function(x){x[2]}),
class=sapply(tax.tmp.ls, function(x){x[3]}),
order=sapply(tax.tmp.ls, function(x){x[4]}),
family=sapply(tax.tmp.ls, function(x){x[5]}),
genus=sapply(tax.tmp.ls, function(x){x[6]}))
taxo$kingdom <- as.character(taxo$kingdom)
taxo$phylum <- as.character(taxo$phylum)
taxo$class <- as.character(taxo$class)
taxo$order <- as.character(taxo$order)
taxo$family <- as.character(taxo$family)
taxo$genus <- as.character(taxo$genus)
for (i in 1:ncol(taxo)){
taxo[which(is.na(taxo[, i])), i] <- ''
}
# taxo.all <- taxo # save big one
taxo$abundance <- colSums(otu.table)
row.names(taxo) <- colnames(otu.table)
invisible(taxo)
}
ls()
taxo <- makeTaxo(taxo.in=tax.np, otu.table=pb.3500)
makeTaxo <- function(taxo.in=tax.np, otu.table=pb.3500) {
taxo.in <- as.character(taxo.in)
tax.tmp.ls <- strsplit(taxo.in, split='; ')
tax.lengths <- unlist(lapply(tax.tmp.ls, length))
max(tax.lengths)
tax.tmp.ls[[1]][1]
# test
# x <- c('a; b; c; d', 'e; f; g', 'i; j')
# x2 <- strsplit(x, '; ')
# x3 <- data.frame(one=sapply(x2, function(x){x[1]}),
# two=sapply(x2, function(x){x[2]}),
# three=sapply(x2, function(x){x[3]}),
# four=sapply(x2, function(x){x[4]}))
# x3
# x3$four <- as.character(x3$four)
# x3$four[which(is.na(x3$four))] <- 'h'
taxo <- data.frame(kingdom=sapply(tax.tmp.ls, function(x){x[1]}),
phylum=sapply(tax.tmp.ls, function(x){x[2]}),
class=sapply(tax.tmp.ls, function(x){x[3]}),
order=sapply(tax.tmp.ls, function(x){x[4]}),
family=sapply(tax.tmp.ls, function(x){x[5]}),
genus=sapply(tax.tmp.ls, function(x){x[6]}))
taxo$kingdom <- as.character(taxo$kingdom)
taxo$phylum <- as.character(taxo$phylum)
taxo$class <- as.character(taxo$class)
taxo$order <- as.character(taxo$order)
taxo$family <- as.character(taxo$family)
taxo$genus <- as.character(taxo$genus)
for (i in 1:ncol(taxo)){
taxo[which(is.na(taxo[, i])), i] <- ''
}
# taxo.all <- taxo # save big one
taxo$abundance <- colSums(otu.table)
row.names(taxo) <- colnames(otu.table)
invisible(taxo)
}
taxo <- makeTaxo(taxo.in=tax.np, otu.table=pb.3500)
head(taxo)
head(taxo,100)
```
range(taxo$abundance)
source('~/.active-rstudio-document', echo=TRUE)
?hclust
library(phyloseq)
setwd('~/Dropbox/SLP_Teaching/Rmd')
surfaces <- import_biom('otu_table_metadata.biom')
surfaces <- import_biom('otu_table.biom', parseFunction=parse_taxonomy_greengenes)
surfaces
surfaces_metadata <- import_qiime_sample_data('map.txt')
surfaces_phyloseq <- import_biom('otu_table.biom', parseFunction=parse_taxonomy_greengenes)
surfaces_map_phyloseq <- import_qiime_sample_data('map.txt')
surfaces_table <- t(otu_table(surfaces_phyloseq))
surfaces_table[1:5, 1:5]
surfaces_table[58:61, 1:5]
surfaces_map <- sample_metadata(surfaces_map_phyloseq)
surfaces_map <- data.frame(surfaces_map_phyloseq)
head(surfaces_map)
surfaces_map <- data.frame(surfaces_map_phyloseq)[-1, ]
head(surfaces_map)
surfaces_table_phyloseq <- import_biom('otu_table.biom', parseFunction=parse_taxonomy_greengenes)
surfaces_map_phyloseq <- import_qiime_sample_data('map.txt')
surfaces_table <- t(otu_table(surfaces_table_phyloseq))
surfaces_table[1:5, 1:5]
surfaces_map <- data.frame(surfaces_map_phyloseq)[-1, ]
head(surfaces_map)
surfaces_taxa <- data.frame(tax_table(surfaces_table_phyloseq))
head(surfaces_taxa)
library(vegan)
library(labdsv)
library(xtable)
identical(row.names(surfaces_table), row.names(surfaces_map))
diff(row.names(surfaces_table), row.names(surfaces_map))
dim(surfaces_table)
dim(surfaces_map)
setdiff(row.names(surfaces_table), row.names(surfaces_map))
row.names(surfaces_table)
row.names(surfaces_map)
identical(row.names(surfaces_taxa), colnames(surfaces_table))
sort(rowSums(surfaces_table), descending=FALSE)
sort(rowSums(surfaces_table), ascending=FALSE)
sort(rowSums(surfaces_table), FALSE)
sort(rowSums(surfaces_table), decreasing=FALSE)
table
tab
tab <- rrarefy(surfaces_table, sample=100)
tab <- rrarefy(surfaces_table, 100)
rrarefy
library(phyloseq)
library(vegan)
library(labdsv)
library(xtable)
class(surfaces_table)
surfaces_table_tmp <- t(otu_table(surfaces_table_phyloseq))
surfaces_table <- as(surfaces_table_tmp, 'matrix')
surfaces_table[1:5, 1:5]
tab <- rrarefy(surfaces_table, 100)
sort(row.names(surfaces_table))
strlen
str.len
str.len
nchar
nchar('swab')
setwd('../Rmd')
load('lillis.RData')
head(swab.map)
swab.map
source('~/.active-rstudio-document', echo=TRUE)
map
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nchar(map[1,1])
names(map)[1] <- 'SampleID'
map$sortID <- as.character(map$SampleID)
map$sortID
nchar(map$sortID)
map['sortID', ]
map[, 'sortID']
map[, c('sortID', 'SampleID')]
map <- surfaceMap[row.names(tab), ]
map$color <- 'wheat'
map$color[map$SurfaceType == 'floor'] <- 'chocolate3'
map$color[map$SurfaceType == 'chair'] <- 'darkslateblue'
map$color[map$SurfaceType == 'desk'] <- 'goldenrod3'
names(map)[1] <- 'SampleID'
map$sortID <- as.character(map$SampleID)
for(i in 1:nrow(map)) {
if(nchar(map$sortID[i]) == 10) {
map$sortID[i] <- gsub('162.', '162.0', map$sortID[i])
}
}
map <- map[order(map$sortID),
c('sortID', 'SurfaeType', 'xcoord', 'ycoord', 'color')]
map <- map[order(map$sortID),
c('sortID', 'SurfaceType', 'xcoord', 'ycoord', 'color')]
map[, c('sortID', 'SampleID')]
map[, c('sortID', 'SurfaceType')]
dim(surfaceTable)
dim(surfaceMap)
surfaceMap
table(map$SurfaceType)
sort(map$location)
sort(map$Location)
sort(surfaceMap$Location)
sort(surfaceMap$location)
row.names(surfaceTable)
setdiff(row.names(surfaceTable), row.names(surfaceMap))
setdiff(row.names(surfaceMap), row.names(surfaceTable))
setdiff(c(1,2,3), c(2,3,4))
rm(list=ls())
surfaceTablePhyloseq <- import_biom('otu_table.biom', parseFunction=parse_taxonomy_greengenes)
surfaceMapPhyloseq <- import_qiime_sample_data('map.txt')
surfaceTablePhyloseq <- import_biom('otu_table.biom', parseFunction=parse_taxonomy_greengenes)
surfaceMapPhyloseq <- import_qiime_sample_data('map.txt')
surfaceTable.tmp <- t(otu_table(surfaceTablePhyloseq))
surfaceTable.tmp <- surfaceTable.tmp[-'Swab.162.61', ]
surfaceTable <- as(surfaceTable.tmp, 'matrix')
surfaceTable[1:5, 1:5]
surfaceTable.tmp <- surfaceTable.tmp[-c('Swab.162.61'), ]
surfaceTable.tmp <- surfaceTable.tmp[!(row.names(surfaceTable.tmp) =='Swab.162.61'), ]
surfaceTable <- as(surfaceTable.tmp, 'matrix')
surfaceTable[1:5, 1:5]
surfaceTablePhyloseq <- import_biom('otu_table.biom', parseFunction=parse_taxonomy_greengenes)
surfaceMapPhyloseq <- import_qiime_sample_data('map.txt')
surfaceTable.tmp <- t(otu_table(surfaceTablePhyloseq))
surfaceTable.tmp <- surfaceTable.tmp[!(row.names(surfaceTable.tmp) =='Swab.162.61'), ]
surfaceTable <- as(surfaceTable.tmp, 'matrix')
surfaceTable[1:5, 1:5]
surfaceMap <- data.frame(surfaceMapPhyloseq)[-1, ]
head(surfaceMap)
surfaceTaxa <- data.frame(tax_table(surfaceTablePhyloseq))
head(surfaceTaxa)
identical(row.names(surfaceTaxa), colnames(surfaceTable))
setdiff(row.names(surfaceTable), row.names(surfaceMap))
setdiff(row.names(surfaceMap), row.names(surfaceTable))
dim(surfaceTable)
dim(surfaceMap)
all.equal(row.names(surfaceMap), row.names(surfaceTable))
identical(sort(row.names(surfaceMap)), sort(row.names(surfaceTable)))
surfaceTablePhyloseq <- import_biom('otu_table.biom', parseFunction=parse_taxonomy_greengenes)
surfaceMapPhyloseq <- import_qiime_sample_data('map.txt')
surfaceTable.tmp <- t(otu_table(surfaceTablePhyloseq))
surfaceTable.tmp <- surfaceTable.tmp[!(row.names(surfaceTable.tmp) =='Swab.162.61'), ]
surfaceTable <- as(surfaceTable.tmp, 'matrix')
surfaceTable[1:5, 1:5]
surfaceMap <- data.frame(surfaceMapPhyloseq)[-1, ]
head(surfaceMap)
surfaceTaxa <- data.frame(tax_table(surfaceTablePhyloseq))
head(surfaceTaxa)
identical(row.names(surfaceTaxa), colnames(surfaceTable))
identical(sort(row.names(surfaceMap)), sort(row.names(surfaceTable)))
sort(rowSums(surfaceTable), decreasing=FALSE)
tab <- rrarefy(surfaceTable, 100)
map <- surfaceMap[row.names(tab), ]
map$color <- 'wheat'
map$color[map$SurfaceType == 'floor'] <- 'chocolate3'
map$color[map$SurfaceType == 'chair'] <- 'darkslateblue'
map$color[map$SurfaceType == 'desk'] <- 'goldenrod3'
names(map)[1] <- gsub('X.', '', names(map)[1])
as.character(map$SampleID)
map$sortID <- as.character(map$SampleID)
dig10 <- function(x) {
if(nchar(x) == 10) {
x <- gsub('162.', '162.0', x)
}
}
sapply(map$sortID, 1, FUN=dig10)
sapply(map$sortID, FUN=dig10)
apply(map$sortID, 1, FUN=dig10)
vapply(map$sortID, FUN=dig10)
apply(map[, 'sortID'], FUN=dig10)
lapply(map$sortID, FUN=dig10)
sapply(map$sortID, FUN=dig10)
unlist(sapply(map$sortID, FUN=dig10))
map <- surfaceMap[row.names(tab), ]
map$color <- 'wheat'
map$color[map$SurfaceType == 'floor'] <- 'chocolate3'
map$color[map$SurfaceType == 'chair'] <- 'darkslateblue'
map$color[map$SurfaceType == 'desk'] <- 'goldenrod3'
names(map)[1] <- gsub('X.', '', names(map)[1])
map$sortID <- as.character(map$SampleID)
for(i in 1:nrow(map)) {
if(nchar(map$sortID[i]) == 10) {
map$sortID[i] <- gsub('162.', '162.0', map$sortID[i])
}
}
map$sortID
map <- map[order(map$sortID),
c('sortID', 'SurfaceType', 'xcoord', 'ycoord', 'color')]
map[, c('sortID', 'SurfaceType')]
distCanberra <- vegdist(tab, 'canberra')
nmdsCanberra <- bestnmds(distCanberra)
plot(nmdsCanberra, pch=21, bg=map$color)
adonis(distCanberra ~ map$SurfaceType)
surfaceTypeModel <- adonis(distCanberra ~ map$SurfaceType)
print(xtable(surfaceTypeModel))
print(xtable(surfaceTypeModel)$aov.tab)
print(xtable(surfaceTypeModel$aov.tab))
print(xtable(surfaceTypeModel$aov.tab), type='html')
data.frame(x=c(1,1,2), y=c(2,2,4))
data.frame(x=c(1,1,1), y=c(2,2,4))
test <- data.frame(x=c(1,1,1), y=c(2,2,4))
vegdist(test, 'euclid')
test <- data.frame(x=c(1,1,3), y=c(2,2,4))
vegdist(test, 'euclid')
2.828427^2
test
distSpatial <- vegdist(data.frame(map$xcoor, map$ycoor), 'euclid')
mantel(distCanberra, distSpatial)
mantel(distCanberra, distSpatial)$aov.tab
names(mantel(distCanberra, distSpatial))
summary(mantel(distCanberra, distSpatial))
mantel(distCanberra, distSpatial)
head(surfaceTaxa
)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
head(taxa)
grep('itochondr', taxa$Species)
grep('itochondr', taxa$Genus)
for (i in 1:ncol(taxa)) {
grep('itochondr', taxa[, i])
}
for (i in 1:ncol(taxa)) {
print(grep('itochondr', taxa[, i]))
}
for (i in 1:ncol(taxa)) {
print(grep('Streptophyt', taxa[, i]))
}
taxa[c(45, 49, 173), ]
for (i in 1:ncol(taxa)) {
print(grep('Chloroplast', taxa[, i]))
}
#family
for (i in 1:ncol(taxa)) {
print(grep('Mitochondria', taxa[, i]))
}
for (i in 1:ncol(taxa)) {
print(grep('itochondria', taxa[, i]))
}
for (i in 1:ncol(taxa)) {
print(grep('mitochondria', taxa[, i]))
}
surfaceTaxa.tmp <- surfaceTaxa[-c(grep('mitochondria', taxa$Family), ]
surfaceTaxa.tmp <- surfaceTaxa[-c(grep('mitochondria', taxa$Family)), ]
surfaceTaxa.tmp <- surfaceTaxa[-c(grep('Chloroplast', taxa$Class)), ]
surfaceTable <- surfaceTable[, row.names(surfaceTaxa)]
identical(row.names(surfaceTaxa), colnames(surfaceTable))
identical(sort(row.names(surfaceMap)), sort(row.names(surfaceTable)))
sort(rowSums(surfaceTable), decreasing=FALSE)
